stages:
  - build
  - test
  - docs
  - deploy
  - package
  - package-test

variables:
  BUILD_DIR: "build"
  ARTIFACT_NAME: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"

# Ubuntu jobs
build-job-ubuntu:
  stage: build
  before_script:
    - apt-get update && apt-get install -y cmake g++ make dpkg rpm
    - cd $CI_PROJECT_DIR
  script:
    - echo "Compiling the source code..."
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - cmake --build .
    - echo "Compile complete."
  artifacts:
    name: "${ARTIFACT_NAME}-build-ubuntu"
    paths:
      - $BUILD_DIR
  tags:
    - ubuntu

test-job-ubuntu:
  stage: test
  needs: [build-job-ubuntu]
  dependencies: [build-job-ubuntu]
  script:
    - echo "Running tests..."
    - cd $BUILD_DIR
    - ctest --verbose
  artifacts:
    name: "${ARTIFACT_NAME}-test-results-ubuntu"
    when: always
    reports:
      junit: build/Testing/Temporary/LastTest.log
  tags:
    - ubuntu

documentation-job-ubuntu:
  stage: docs
  needs: [test-job-ubuntu]
  dependencies: [test-job-ubuntu]
  before_script:
    - apt-get update && apt-get install -y doxygen graphviz
  script:
    - doxygen Doxyfile
    - echo "Documentation generated successfully"
  artifacts:
    name: "${ARTIFACT_NAME}-documentation-ubuntu"
    paths:
      - html/
  tags:
    - ubuntu

deploy-job-ubuntu:
  stage: deploy
  needs: [test-job-ubuntu, build-job-ubuntu]
  dependencies: [test-job-ubuntu, build-job-ubuntu]
  script:
    - echo "Deploying artifacts..."
    - mkdir -p /deploy
    - cp -r $BUILD_DIR/main_app /deploy/
  artifacts:
    name: "${ARTIFACT_NAME}-deploy-ubuntu"
    paths:
      - /deploy/main_app
  tags:
    - ubuntu

package-job-ubuntu:
  stage: package
  needs: [deploy-job-ubuntu, build-job-ubuntu]
  dependencies: [deploy-job-ubuntu, build-job-ubuntu]
  script:
    - echo "Installing for packaging..."
    - cd $BUILD_DIR
    - apt update && apt install -y file cpio fakeroot
    - make install DESTDIR=install_dir
    - echo "Running CPack with debug output..."
    - mkdir -p packages
    - cpack -G DEB
    - ls -l
    - ls -l packages/
  artifacts:
    name: "${ARTIFACT_NAME}-packages-ubuntu"
    paths:
      - $BUILD_DIR/packages/
  tags:
    - ubuntu

package-test-job-ubuntu:
  stage: package-test
  needs: [package-job-ubuntu, build-job-ubuntu]
  dependencies: [package-job-ubuntu, build-job-ubuntu]
  before_script:
    - apt-get update
  script:
    - echo "Testing DEB package installation..."
    - if ls $BUILD_DIR/packages/*.deb 1>/dev/null 2>&1; then
      sudo dpkg -i $BUILD_DIR/packages/*.deb;
      echo "Package contents:";
      dpkg -L MatrixCalculator;
      echo "Testing application with sample calculation...";
      main_app "2 2 1 2 3 4" "2 2 2 0 1 2";
      echo "Test completed successfully";
      else
      echo "No DEB package found!";
      exit 1;
      fi
  artifacts:
    name: "${ARTIFACT_NAME}-package-test-ubuntu"
    when: always
  tags:
    - ubuntu

# CentOS jobs
.centos-build-template: &centos-build
  before_script:
    - yum install -y cmake gcc-c++ make rpm-build

build-job-centos:
  <<: *centos-build
  stage: build
  before_script:
    - yum update -y
    - yum install -y cmake gcc-c++ make rpm-build
  script:
    - echo "Compiling the source code on CentOS..."
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - cmake --build .
    - echo "Compile complete."
  artifacts:
    name: "${ARTIFACT_NAME}-build-centos"
    paths:
      - $BUILD_DIR
  tags:
    - centos-rpm

test-job-centos:
  <<: *centos-build
  stage: test
  needs: [build-job-centos]
  dependencies: [build-job-centos]
  script:
    - echo "Running tests on CentOS..."
    - cd $BUILD_DIR
    - ctest --verbose
  artifacts:
    name: "${ARTIFACT_NAME}-test-results-centos"
    when: always
    reports:
      junit: build/Testing/Temporary/LastTest.log
  tags:
    - centos-rpm

documentation-job-centos:
  <<: *centos-build
  stage: docs
  needs: [test-job-centos]
  dependencies: [test-job-centos]
  before_script:
    - yum install -y doxygen graphviz
  script:
    - doxygen Doxyfile
    - echo "Documentation generated successfully"
  artifacts:
    name: "${ARTIFACT_NAME}-documentation-centos"
    paths:
      - html/
  tags:
    - centos-rpm

deploy-job-centos:
  <<: *centos-build
  stage: deploy
  needs: [test-job-centos, build-job-centos]
  dependencies: [test-job-centos, build-job-centos]
  script:
    - echo "Deploying artifacts..."
    - mkdir -p /deploy
    - cp -r $BUILD_DIR/main_app /deploy/
  artifacts:
    name: "${ARTIFACT_NAME}-deploy-centos"
    paths:
      - /deploy/main_app
  tags:
    - centos-rpm

package-job-centos:
  <<: *centos-build
  stage: package
  needs: [deploy-job-centos, build-job-centos]
  dependencies: [deploy-job-centos, build-job-centos]
  script:
    - echo "Installing for packaging on CentOS..."
    - cd $BUILD_DIR
    - make install DESTDIR=install_dir
    - echo "Running CPack with debug output..."
    - mkdir -p packages
    - cpack -G RPM
    - ls -l
    - ls -l packages/
  artifacts:
    name: "${ARTIFACT_NAME}-packages-centos"
    paths:
      - $BUILD_DIR/packages/
  tags:
    - centos-rpm

package-test-job-centos:
  <<: *centos-build
  stage: package-test
  needs: [package-job-centos, build-job-centos]
  dependencies: [package-job-centos, build-job-centos]
  script:
    - echo "Testing RPM package installation..."
    - echo "Available packages:"
    - ls -l $BUILD_DIR/packages/
    - if ls $BUILD_DIR/packages/*.rpm 1>/dev/null 2>&1; then
        PACKAGE_PATH=$(ls $BUILD_DIR/packages/*.rpm);
        echo "Installing package: $PACKAGE_PATH";
        rpm -i $PACKAGE_PATH;
        echo "Package contents:";
        PACKAGE_NAME=$(rpm -qp $PACKAGE_PATH);
        echo "Package name: $PACKAGE_NAME";
        rpm -ql $PACKAGE_NAME;
        echo "Testing application with sample calculation...";
        main_app "2 2 1 2 3 4" "2 2 2 0 1 2";
        echo "Test completed successfully";
      else
        echo "No RPM package found!";
        exit 1;
      fi
  artifacts:
    name: "${ARTIFACT_NAME}-package-test-centos"
    when: always
  tags:
    - centos-rpm
